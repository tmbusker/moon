# Generated by Django 4.1.4 on 2023-09-30 08:50

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            options={
                'verbose_name': 'authorization group',
                'verbose_name_plural': 'authorization group',
                'db_table': 'cmm_authgroup',
                'permissions': [('download_csv_authgroup', 'Can download AuthGroup CSV'), ('download_excel_authgroup', 'Can download AuthGroup EXCEL'), ('upload_csv_authgroup', 'Can upload AuthGroup CSV')],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='CsvLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, max_length=120, null=True, verbose_name='creator')),
                ('updated_at', models.DateTimeField(blank=True, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('log_level', models.CharField(choices=[('info', 'Information'), ('warn', 'Warning'), ('error', 'Error')], default='info', max_length=5, verbose_name='csv log level')),
                ('log_type', models.CharField(choices=[('upload', 'Csv Upload'), ('download', 'Csv Download')], default='upload', max_length=12, verbose_name='csv log type')),
                ('edit_type', models.CharField(choices=[('insert', 'insert'), ('update', 'update')], default='insert', max_length=12, verbose_name='csv edit type')),
                ('file_name', models.CharField(blank=True, max_length=120, null=True, verbose_name='file name')),
                ('row_no', models.IntegerField(blank=True, null=True, verbose_name='row no')),
                ('row_content', models.TextField(blank=True, null=True, verbose_name='row content')),
                ('message', models.CharField(blank=True, max_length=2048, null=True, verbose_name='message')),
                ('lot_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='lot number')),
            ],
            options={
                'verbose_name': 'csv log',
                'verbose_name_plural': 'csv logs',
                'db_table': 'cmm_csv_log',
                'ordering': ['lot_number', 'file_name', 'row_no'],
                'default_permissions': [],
                'unique_together': {('lot_number', 'file_name', 'row_no')},
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'authorization user',
                'verbose_name_plural': 'authorization users',
                'db_table': 'cmm_authuser',
                'permissions': [('download_csv_authuser', 'Can download AuthUser CSV'), ('download_excel_authuser', 'Can download AuthUser EXCEL'), ('upload_csv_authuser', 'Can upload AuthUser CSV')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
